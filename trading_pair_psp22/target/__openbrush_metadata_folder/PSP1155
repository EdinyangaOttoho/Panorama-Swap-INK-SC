"#[doc =\n\" Contract module which provides a basic implementation of multiple token types.\"]\n#[doc =\n\" A single deployed contract may include any combination of fungible tokens,\"]\n#[doc =\n\" non-fungible tokens or other configurations (e.g. semi-fungible tokens).\"]\npub trait PSP1155\n{\n    #[doc =\n    \" Returns the amount of tokens of token type `id` owned by `account`.\"]\n    #[ink(message)] #[ink(selector = 688445478u32)] fn\n    balance_of(& self, account : AccountId, id : Id) -> Balance ;\n    #[doc = \" Batched version of {balance_of}.\"] #[ink(message)]\n    #[ink(selector = 3186781366u32)] fn\n    balance_of_batch(& self, accounts_ids : Vec < (AccountId, Id) >) -> Vec <\n    Balance > ;\n    #[doc =\n    \" Grants or revokes permission to `operator` to transfer the caller\\'s tokens, according to `approved`\"]\n    #[doc = \"\"] #[doc = \" On success a `ApprovalForAll` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc = \" Returns with `NotAllowed` error if it is self approve.\"]\n    #[ink(message)] #[ink(selector = 3004052505u32)] fn\n    set_approval_for_all(& mut self, operator : AccountId, approved : bool) ->\n    Result < (), PSP1155Error > ;\n    #[doc =\n    \" Returns true if `operator` is approved to transfer ``account``\\'s tokens.\"]\n    #[ink(message)] #[ink(selector = 2913857364u32)] fn\n    is_approved_for_all(& self, account : AccountId, operator : AccountId) ->\n    bool ;\n    #[doc =\n    \" Transfers `amount` tokens of token type `id` from `from` to `to`. Also some `data` can be passed.\"]\n    #[doc = \"\"] #[doc = \" On success a `TransferSingle` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `TransferToZeroAddress` error if recipient is zero account.\"]\n    #[doc = \"\"]\n    #[doc = \" Returns `NotAllowed` error if transfer is not approved.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientBalance` error if `from` doesn\\'t contain enough balance.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `SafeTransferCheckFailed` error if `to` doesn\\'t accept transfer.\"]\n    #[ink(message)] #[ink(selector = 2575733161u32)] fn\n    transfer_from(& mut self, from : AccountId, to : AccountId, id : Id,\n    amount : Balance, data : Vec < u8 >,) -> Result < (), PSP1155Error > ;\n    #[doc = \" Batched version of {safe_transfer_from}.\"] #[doc = \"\"]\n    #[doc = \" On success a `TransferBatch` event is emitted.\"] #[ink(message)]\n    #[ink(selector = 3847214567u32)] fn\n    batch_transfer_from(& mut self, from : AccountId, to : AccountId,\n    ids_amounts : Vec < (Id, Balance) >, data : Vec < u8 >,) -> Result < (),\n    PSP1155Error > ;\n}"